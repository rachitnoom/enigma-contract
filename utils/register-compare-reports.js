const fs = require('fs');
const RLP = require('rlp');
const ADDRS = [
  '0x4800e3f00f9cdbc4420ce4b299855c39455a7bab',
  '0x26b97a149ab68740034334375c67afcf125f0caf',
];
const REPORTS = [
  '{"id":"27594931944982484559535512292851436992","timestamp":"2019-02-12T18:50:27.368748","isvEnclaveQuoteStatus":"GROUP_OUT_OF_DATE","platformInfoBlob":"1502006504000700000505020401010000000000000000000008000009000000020000000000000AC7E077731D2090E685064D91CD6C1AABDDA629B6BF478D27950D59FCC7E33271333A92D56098E0489FE4339B664ADE4888AA1695B389EC64AFFA2B1D6C1DBECBDD","isvEnclaveQuoteBody":"AgAAAMcKAAAHAAYAAAAAABYB+Vw5ueowf+qruQGtw+6yMPMBSlbDeUQ8w7OHUCgqAgX/BP//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAADlca6XQetVGTms5okoNNINkpvtRB41+GLAF+5XJv27MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACD1xnnferKFHD2uvYqTXdDA8iZ22kCD5xw7h38CMfOngAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAOPwD5zbxEIM5LKZhVw5RVp7qwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"}',
  '{"id":"138716609621435238003295069316188068770","timestamp":"2019-02-28T21:36:27.356202","isvEnclaveQuoteStatus":"GROUP_OUT_OF_DATE","platformInfoBlob":"1502006504000600000808020401010000000000000000000008000009000000020000000000000AF2A67C01C84D950552687431E3B5F8981D35BD03BFD53D209BCCC1AC5DB9CBE3FEE948C17EC5272A51DC2B2577D25EDD42492877B6AB10F6797463830B65F82917","isvEnclaveQuoteBody":"AgAAAPIKAAAHAAYAAAAAABYB+Vw5ueowf+qruQGtw+4CDn4FRGnk8Z47utdnpaUHCAgCBAECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAHAAAAAAAAAJL3Z9GBNRUxSNr4s8/vkY9xmejvm2U1D/wewXlk4woNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACD1xnnferKFHD2uvYqTXdDA8iZ22kCD5xw7h38CMfOngAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAweDI2Yjk3YTE0OWFiNjg3NDAwMzQzMzQzNzVjNjdhZmNmMTI1ZjBjYWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"}',
];
const SIGNS = [
  '57ebd93c7b0c665ad98551a594ad3d7e3593f9ada7ca7ae4625328be23b615dc57a317a14ba4a79426466b2435fc92a1830ceff9828d535642e9e66c3aeba6537e9d5e25495bf290c487de720691f66de643c3497645c27ad278f68e05799d18050bb03e0c280ddc0c29a581fe088f1403c08932b316b77226c8661c17b334f3e68386dd680485a14806e3bf2a6e46ec0be9c9a6eedc4b6f68f3f3f509dc995333a791e875691f1a4e7345ecb8683994ae56ae242f59414dd5f428e738d6c200358f4be556653d3facdf35d1e681a26755889ba42cc1fba0cb17f00879403c5d5f6a42bf08904e4f0e637cad0a20eebb74ce5630c991ab19e1a1fafb116a79e9',
  '3c1d6e98082882a2409bea1881e8f4831a7fc6b876e4066f811ad2b438102eb5c12f7c7ac40795675a1c4b73685dc41d1b427016b98cd90333e0f0e830315cfe6a8e5cc8be20fbbe532511da02c1655222345ef5339dcaca4c1e801211764fd6a312555cc63d21b5c6d78615706dafd7aa5606895396d0e6ac6d6ec4b96be1ef3c6c2385381e23d9c5eb4fcc49b1afcb9c2e4638a49251fe7c22f575efad5a300ec91e35d4afaa91c723df3bffc1746e7d93217a9b075199dd7e9b3735af730f2bce1eec39d718e5c86f4a06aefb9936ca5ffb8d30f9484972738f036b05a8bdd15ba03775c9668f1bcfe474f8e05845ea440a6baee1b79b0f4d435b36570fce',
];
module.exports = function(callback) {
  (async () => {
    const jsonInterface = 'build/contracts/IEnigma.json';
    const jsonContract = 'build/contracts/Enigma.json';
    const abi = JSON.parse(fs.readFileSync(jsonInterface)).abi;
    const address = JSON.parse(fs.readFileSync(jsonContract)).networks['4447'].address;
    let Enigma = new web3.eth.Contract(abi, address);
    const blockNumber = await web3.eth.getBlockNumber();
    console.log('The current block number:', blockNumber);
    const accounts = await web3.eth.getAccounts();
    for (let [index, signer] of ADDRS.entries()) {
      console.log('Registering report for signer', signer, REPORTS[index]);
      // const report = '0x' + RLP.encode(REPORTS[index]).toString('hex');
      const report = '0x' + Array.from(REPORTS[index]).map((c) => c.charCodeAt(0).toString(16)).join('');
      const sig = '0x' + SIGNS[index];
      try {
        const receipt = await Enigma.methods.register(signer, report, sig).send({
          gas: 4712388,
          gasPrice: 100000000000,
          from: accounts[index],
        });
        console.log('The receipt for worker', signer, receipt);
      } catch (e) {
        console.log('Unable to register', e);
      }
    }
    callback();
  })();
};
